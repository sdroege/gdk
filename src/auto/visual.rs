// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ByteOrder;
use Screen;
use VisualType;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::mem;

glib_wrapper! {
    pub struct Visual(Object<ffi::GdkVisual, VisualClass>);

    match fn {
        get_type => || ffi::gdk_visual_get_type(),
    }
}

impl Visual {
    #[cfg_attr(feature = "v3_22", deprecated)]
    pub fn get_best() -> Visual {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gdk_visual_get_best())
        }
    }

    #[cfg_attr(feature = "v3_22", deprecated)]
    pub fn get_best_depth() -> i32 {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gdk_visual_get_best_depth()
        }
    }

    #[cfg_attr(feature = "v3_22", deprecated)]
    pub fn get_best_type() -> VisualType {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gdk_visual_get_best_type())
        }
    }

    #[cfg_attr(feature = "v3_22", deprecated)]
    pub fn get_best_with_both(depth: i32, visual_type: VisualType) -> Option<Visual> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gdk_visual_get_best_with_both(depth, visual_type.to_glib()))
        }
    }

    #[cfg_attr(feature = "v3_22", deprecated)]
    pub fn get_best_with_depth(depth: i32) -> Option<Visual> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gdk_visual_get_best_with_depth(depth))
        }
    }

    #[cfg_attr(feature = "v3_22", deprecated)]
    pub fn get_best_with_type(visual_type: VisualType) -> Option<Visual> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gdk_visual_get_best_with_type(visual_type.to_glib()))
        }
    }

    #[cfg_attr(feature = "v3_22", deprecated)]
    pub fn get_system() -> Visual {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gdk_visual_get_system())
        }
    }
}

pub const NONE_VISUAL: Option<&Visual> = None;

pub trait VisualExt: 'static {
    #[cfg_attr(feature = "v3_22", deprecated)]
    fn get_bits_per_rgb(&self) -> i32;

    fn get_blue_pixel_details(&self) -> (u32, i32, i32);

    #[cfg_attr(feature = "v3_22", deprecated)]
    fn get_byte_order(&self) -> ByteOrder;

    #[cfg_attr(feature = "v3_22", deprecated)]
    fn get_colormap_size(&self) -> i32;

    fn get_depth(&self) -> i32;

    fn get_green_pixel_details(&self) -> (u32, i32, i32);

    fn get_red_pixel_details(&self) -> (u32, i32, i32);

    fn get_screen(&self) -> Screen;

    fn get_visual_type(&self) -> VisualType;
}

impl<O: IsA<Visual>> VisualExt for O {
    fn get_bits_per_rgb(&self) -> i32 {
        unsafe {
            ffi::gdk_visual_get_bits_per_rgb(self.as_ref().to_glib_none().0)
        }
    }

    fn get_blue_pixel_details(&self) -> (u32, i32, i32) {
        unsafe {
            let mut mask = mem::uninitialized();
            let mut shift = mem::uninitialized();
            let mut precision = mem::uninitialized();
            ffi::gdk_visual_get_blue_pixel_details(self.as_ref().to_glib_none().0, &mut mask, &mut shift, &mut precision);
            (mask, shift, precision)
        }
    }

    fn get_byte_order(&self) -> ByteOrder {
        unsafe {
            from_glib(ffi::gdk_visual_get_byte_order(self.as_ref().to_glib_none().0))
        }
    }

    fn get_colormap_size(&self) -> i32 {
        unsafe {
            ffi::gdk_visual_get_colormap_size(self.as_ref().to_glib_none().0)
        }
    }

    fn get_depth(&self) -> i32 {
        unsafe {
            ffi::gdk_visual_get_depth(self.as_ref().to_glib_none().0)
        }
    }

    fn get_green_pixel_details(&self) -> (u32, i32, i32) {
        unsafe {
            let mut mask = mem::uninitialized();
            let mut shift = mem::uninitialized();
            let mut precision = mem::uninitialized();
            ffi::gdk_visual_get_green_pixel_details(self.as_ref().to_glib_none().0, &mut mask, &mut shift, &mut precision);
            (mask, shift, precision)
        }
    }

    fn get_red_pixel_details(&self) -> (u32, i32, i32) {
        unsafe {
            let mut mask = mem::uninitialized();
            let mut shift = mem::uninitialized();
            let mut precision = mem::uninitialized();
            ffi::gdk_visual_get_red_pixel_details(self.as_ref().to_glib_none().0, &mut mask, &mut shift, &mut precision);
            (mask, shift, precision)
        }
    }

    fn get_screen(&self) -> Screen {
        unsafe {
            from_glib_none(ffi::gdk_visual_get_screen(self.as_ref().to_glib_none().0))
        }
    }

    fn get_visual_type(&self) -> VisualType {
        unsafe {
            from_glib(ffi::gdk_visual_get_visual_type(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for Visual {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Visual")
    }
}
