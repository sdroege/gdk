// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use CursorType;
use Display;
#[cfg(any(feature = "v3_10", feature = "dox"))]
use cairo;
use ffi;
use gdk_pixbuf;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
#[cfg(any(feature = "v3_10", feature = "dox"))]
use std::mem;

glib_wrapper! {
    pub struct Cursor(Object<ffi::GdkCursor, CursorClass>);

    match fn {
        get_type => || ffi::gdk_cursor_get_type(),
    }
}

impl Cursor {
    #[cfg_attr(feature = "v3_16", deprecated)]
    pub fn new(cursor_type: CursorType) -> Cursor {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gdk_cursor_new(cursor_type.to_glib()))
        }
    }

    pub fn new_for_display<P: IsA<Display>>(display: &P, cursor_type: CursorType) -> Cursor {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gdk_cursor_new_for_display(display.as_ref().to_glib_none().0, cursor_type.to_glib()))
        }
    }

    pub fn new_from_name<P: IsA<Display>>(display: &P, name: &str) -> Cursor {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gdk_cursor_new_from_name(display.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    pub fn new_from_pixbuf<P: IsA<Display>, Q: IsA<gdk_pixbuf::Pixbuf>>(display: &P, pixbuf: &Q, x: i32, y: i32) -> Cursor {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gdk_cursor_new_from_pixbuf(display.as_ref().to_glib_none().0, pixbuf.as_ref().to_glib_none().0, x, y))
        }
    }

    #[cfg(any(feature = "v3_10", feature = "dox"))]
    pub fn new_from_surface<P: IsA<Display>>(display: &P, surface: &cairo::Surface, x: f64, y: f64) -> Cursor {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gdk_cursor_new_from_surface(display.as_ref().to_glib_none().0, mut_override(surface.to_glib_none().0), x, y))
        }
    }
}

pub const NONE_CURSOR: Option<&Cursor> = None;

pub trait CursorExt: 'static {
    fn get_cursor_type(&self) -> CursorType;

    fn get_display(&self) -> Display;

    fn get_image(&self) -> Option<gdk_pixbuf::Pixbuf>;

    #[cfg(any(feature = "v3_10", feature = "dox"))]
    fn get_surface(&self) -> (Option<cairo::Surface>, f64, f64);
}

impl<O: IsA<Cursor>> CursorExt for O {
    fn get_cursor_type(&self) -> CursorType {
        unsafe {
            from_glib(ffi::gdk_cursor_get_cursor_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_display(&self) -> Display {
        unsafe {
            from_glib_none(ffi::gdk_cursor_get_display(self.as_ref().to_glib_none().0))
        }
    }

    fn get_image(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_full(ffi::gdk_cursor_get_image(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_10", feature = "dox"))]
    fn get_surface(&self) -> (Option<cairo::Surface>, f64, f64) {
        unsafe {
            let mut x_hot = mem::uninitialized();
            let mut y_hot = mem::uninitialized();
            let ret = from_glib_full(ffi::gdk_cursor_get_surface(self.as_ref().to_glib_none().0, &mut x_hot, &mut y_hot));
            (ret, x_hot, y_hot)
        }
    }
}

impl fmt::Display for Cursor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Cursor")
    }
}
